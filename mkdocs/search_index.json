{
    "docs": [
        {
            "location": "/", 
            "text": "Tasty Bits", 
            "title": "Home"
        }, 
        {
            "location": "/#tasty-bits", 
            "text": "", 
            "title": "Tasty Bits"
        }, 
        {
            "location": "/Kubernetes DNS/", 
            "text": "Useful lookups on Kubernetes Pods\n\n\n    apiVersion: v1\n    kind: Service\n    metadata:\n      labels:\n        k8s-app: kube-registry\n        kubernetes.io/cluster-service: \ntrue\n\n        kubernetes.io/name: KubeRegistry\n      name: images\n      namespace: kube-system\n    spec:\n      clusterIP: 100.67.24.207\n      ports:\n      - name: registry\n        port: 5000\n        protocol: TCP\n        targetPort: 5000\n      - name: registry-ui\n        port: 80\n        protocol: TCP\n        targetPort: 80\n      selector:\n        k8s-app: kube-registry\n      type: ClusterIP\n\n\n\n\n\nFully Qualified Lookup\n\n\nIntra-namespace Lookup\n\n\nSRV\n\n\ndig +short +search _\nport_name\n._\nprotocol\n.\nservice_name\n SRV\n\n\ndig +short +search _registry._tcp.images SRV\n\n\nA (typical forward lookup)\n\n\ndig +short +search \nservice_name\n\n\ndig +short +search images\n\n\nInter-namespace Lookup\n\n\nSRV\n\n\ndig +short +search _\nport_name\n._\nprotocol\n.\nservice_name\n.\nnamespace\n SRV\n\n\ndig +short +search _registry._tcp.images.kube-system SRV\n\n\nA\n\n\ndig +short +search \nservice_name\n.\nnamespace\n\n\ndig +short +search images.kube-system\n\n\n\n\nSRV RR-specific notes", 
            "title": "Kubernetes DNS"
        }, 
        {
            "location": "/Kubernetes DNS/#useful-lookups-on-kubernetes-pods", 
            "text": "apiVersion: v1\n    kind: Service\n    metadata:\n      labels:\n        k8s-app: kube-registry\n        kubernetes.io/cluster-service:  true \n        kubernetes.io/name: KubeRegistry\n      name: images\n      namespace: kube-system\n    spec:\n      clusterIP: 100.67.24.207\n      ports:\n      - name: registry\n        port: 5000\n        protocol: TCP\n        targetPort: 5000\n      - name: registry-ui\n        port: 80\n        protocol: TCP\n        targetPort: 80\n      selector:\n        k8s-app: kube-registry\n      type: ClusterIP", 
            "title": "Useful lookups on Kubernetes Pods"
        }, 
        {
            "location": "/Kubernetes DNS/#fully-qualified-lookup", 
            "text": "", 
            "title": "Fully Qualified Lookup"
        }, 
        {
            "location": "/Kubernetes DNS/#intra-namespace-lookup", 
            "text": "", 
            "title": "Intra-namespace Lookup"
        }, 
        {
            "location": "/Kubernetes DNS/#srv", 
            "text": "dig +short +search _ port_name ._ protocol . service_name  SRV  dig +short +search _registry._tcp.images SRV", 
            "title": "SRV"
        }, 
        {
            "location": "/Kubernetes DNS/#a-typical-forward-lookup", 
            "text": "dig +short +search  service_name  dig +short +search images", 
            "title": "A (typical forward lookup)"
        }, 
        {
            "location": "/Kubernetes DNS/#inter-namespace-lookup", 
            "text": "", 
            "title": "Inter-namespace Lookup"
        }, 
        {
            "location": "/Kubernetes DNS/#srv_1", 
            "text": "dig +short +search _ port_name ._ protocol . service_name . namespace  SRV  dig +short +search _registry._tcp.images.kube-system SRV", 
            "title": "SRV"
        }, 
        {
            "location": "/Kubernetes DNS/#a", 
            "text": "dig +short +search  service_name . namespace  dig +short +search images.kube-system   SRV RR-specific notes", 
            "title": "A"
        }, 
        {
            "location": "/SRV Records/", 
            "text": "SRV Records\n\n\nService records became an Official Internet Cog in the year 2000 with the IETF\u2019s\npublication of the mercifully short \nRFC2782\n.\n\n\nThere have been dozens of articles, posts, etc\non the topic--this is not going to be one of those; only some brief notes for\nthe glancing (think of it as an \nunstructured cheatsheet\n) with some annotations\ntowards how they relate to current service discovery practices.\n\n\ntypical public SRV record\n\n\n\ngladiatr@lilbuddy-quatre.local\n[~]\n:# dig _sip._udp.sip.voice.google.com SRV\n\n; [...]\n;; ANSWER SECTION:\n_sip._udp.[...].  218 IN  SRV   20 1 5060 sip-anycast-2.voice.google.com.\n_sip._udp.[...].  218 IN  SRV   10 1 5060 sip-anycast-1.voice.google.com.\n[  1][  2][  3]   [ 4][5] [6]   [7]       [10]\n                                   [8]\n                                     [9]\n; [...]\n\n\n\n\n\n\nService \n++\n\n\nmust start with an underscore\n\n\nshould\n be the name of an IANA registered service\n\n\n\n\n\n\nProtocol\n (either TCP or UDP) \n++\n\n\nThe zone this record applies to \n--\n\n\nRecord TTL \n--\n\n\nRecord Class \n--\n\n\nRecord Type \n--\n\n\nThe target host record\u2019s priority score \n++\n\n\nThe target host record\u2019s weight scaler \n++\n\n\nThe service TCP/UDP \nport\n \n++\n \n\n\nThe target host record that will resolve to the numeric address of a \nservice host\n\n\n\n\n--\n Standard RR bit\n\n\n++\n SRV RR bit \n\n\ntypically, somewhat useful\n\n\nHistorically SRV records were for scenarios where a client program\ncarried a baked-in or static configuration that would allow it to connect to \nthe correct host and port to take care of its business--clients would happily\nquery the domain\u2019s SRV records and the ops folks could move things around\nwithout as much hassle.\n\n\nThe most prolific examples can be found with the introduction\nof the Windows 2000 Server OS line mostly through its adoption of\nKerberos for the core of its Active Directory Service.\n\n\ninto its own\n\n\nThe introduction of non-brittle service discovery cluster projects finally made\nSRV records truly useful.\n\n\n\n\nOSS Service Discovery projects\n\n\nConsul\n\n\nEtcd\n \n*\n\n\nZookeeper\n \n\n\n\n\n\n\n\n\n*\n requires additional non-core pieces\n\n\nThey operate as internal services at the local and federated cluster levels.\n\n\nDNS endpoints should be considered protocol gateways between the data store\u2019s API\nand the resolver client.\n\n\nBecause of the resolver service\u2019s ability to respond efficiently to changes \nin services de/registered with the data store, the viability and accuracy of\nSRV records have become an adequate service endpoint disseminator for all \nbut the most low-latency requirements.", 
            "title": "SRV Records"
        }, 
        {
            "location": "/SRV Records/#srv-records", 
            "text": "Service records became an Official Internet Cog in the year 2000 with the IETF\u2019s\npublication of the mercifully short  RFC2782 .  There have been dozens of articles, posts, etc\non the topic--this is not going to be one of those; only some brief notes for\nthe glancing (think of it as an  unstructured cheatsheet ) with some annotations\ntowards how they relate to current service discovery practices.", 
            "title": "SRV Records"
        }, 
        {
            "location": "/SRV Records/#typical-public-srv-record", 
            "text": "gladiatr@lilbuddy-quatre.local\n[~]\n:# dig _sip._udp.sip.voice.google.com SRV\n\n; [...]\n;; ANSWER SECTION:\n_sip._udp.[...].  218 IN  SRV   20 1 5060 sip-anycast-2.voice.google.com.\n_sip._udp.[...].  218 IN  SRV   10 1 5060 sip-anycast-1.voice.google.com.\n[  1][  2][  3]   [ 4][5] [6]   [7]       [10]\n                                   [8]\n                                     [9]\n; [...]   Service  ++  must start with an underscore  should  be the name of an IANA registered service    Protocol  (either TCP or UDP)  ++  The zone this record applies to  --  Record TTL  --  Record Class  --  Record Type  --  The target host record\u2019s priority score  ++  The target host record\u2019s weight scaler  ++  The service TCP/UDP  port   ++    The target host record that will resolve to the numeric address of a  service host   --  Standard RR bit  ++  SRV RR bit", 
            "title": "typical public SRV record"
        }, 
        {
            "location": "/SRV Records/#typically-somewhat-useful", 
            "text": "Historically SRV records were for scenarios where a client program\ncarried a baked-in or static configuration that would allow it to connect to \nthe correct host and port to take care of its business--clients would happily\nquery the domain\u2019s SRV records and the ops folks could move things around\nwithout as much hassle.  The most prolific examples can be found with the introduction\nof the Windows 2000 Server OS line mostly through its adoption of\nKerberos for the core of its Active Directory Service.", 
            "title": "typically, somewhat useful"
        }, 
        {
            "location": "/SRV Records/#into-its-own", 
            "text": "The introduction of non-brittle service discovery cluster projects finally made\nSRV records truly useful.   OSS Service Discovery projects  Consul  Etcd   *  Zookeeper       *  requires additional non-core pieces  They operate as internal services at the local and federated cluster levels.  DNS endpoints should be considered protocol gateways between the data store\u2019s API\nand the resolver client.  Because of the resolver service\u2019s ability to respond efficiently to changes \nin services de/registered with the data store, the viability and accuracy of\nSRV records have become an adequate service endpoint disseminator for all \nbut the most low-latency requirements.", 
            "title": "into its own"
        }
    ]
}